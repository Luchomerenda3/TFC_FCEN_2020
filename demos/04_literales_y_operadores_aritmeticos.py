# -*- coding: utf-8 -*-
# ---
# jupyter:
#   jupytext:
#     formats: ipynb,py:percent
#     text_representation:
#       extension: .py
#       format_name: percent
#       format_version: '1.3'
#       jupytext_version: 1.6.0
#   kernelspec:
#     display_name: Python 3
#     language: python
#     name: python3
# ---

# %% [markdown]
# # Literales, n√∫meros y operaciones aritm√©ticas
#
# Parte del TFC 2020

# %% [markdown]
# ## Literales enteros

# %% [markdown]
# Todas las que siguen son formas v√°lidas de expresar el entero 1234567890

# %%
1234567890

# %%
1_234_567_890

# %%
0o11145401322

# %%
0x499602d2

# %%
0B100_10011_0010110_0000001_011010010

# %% [markdown]
# Para obtener la representaci√≥n binaria, octal o hexadecimal de un entero podemos usar las funciones siguientes. Notar que los resultados son cadenas de caracteres.

# %%
bin(3141592654)

# %%
oct(3141592654)

# %%
hex(3141592654)

# %% [markdown]
# Como dijimos, los enteros en Python no tienen cota superior ni inferior:

# %%
4713 * 2**4713 + 1 # El segundo n√∫mero primo (de los 15 conocidos) en la secuencia de Cullen

# %% [markdown]
# ## Literales de punto flotante

# %% [markdown]
# Todas las que siguen son formas v√°lidas de expresar n√∫meros de punto flotante:

# %%
1.0e4

# %%
10_000.0

# %%
10000.

# %%
1 + 3 * 0. # Al haber un operando que es de punto flotante se "promociona" a la expresi√≥n

# %%
234.5e-14

# %% [markdown]
# Los n√∫meros de punto flotante en la implementaci√≥n "C" de python son de 64 bits, lo que involucra una precici√≥n de 16 cifras decimales (despu√©s haremos esta frase m√°s precisa).

# %%
1e-15 + 1 

# %%
1e-16 + 1

# %% [markdown]
# Los n√∫meros de punto flotante son siempre racionales. La precisi√≥n finita hace que algunas operaciones tengan resultados no evidentes.

# %%
(1e-15 + 1) - 1

# %%
1e-15 + (1 - 1.0)

# %%
1e-15 + (2. - 1.)

# %%
(1e-15 + 2.) - 1.

# %%
0.1 + 0.2

# %% [markdown]
# Este √∫ltimo es un resultado famoso y tiene su propio sitio web: [0.30000000000000004.com](https://0.30000000000000004.com)

# %%
3602879701896397 / 2 ** 55

# %%
0.1 + 0.1 + 0.1

# %%
0.1.hex()

# %% [markdown]
# ## Complejos

# %% [markdown]
# Los imaginarios se representan con una "j" pegada (una notaci√≥n "ingenieril" por lo general):

# %%
0.1j

# %% [markdown]
# Como dijimos los complejos se construyen como suma de un real y un imaginario:

# %%
1.0 + 1.0j

# %% [markdown]
# O usando la funci√≥n `complex`:

# %%
complex(1.0,1.0)

# %% [markdown]
# La funci√≥n `abs` se comporta como es de esperar:

# %%
abs(-1)

# %%
abs(1.0+1.0j)

# %%
abs(-1.)

# %% [markdown]
# # Cadenas de caracteres
#
# Todas las siguientes son cadenas de caracteres v√°lidas

# %%
'''a
b'''

# %%
"""a
b"""

# %%
'a\nb'

# %% [markdown]
# `\n` es el 'c√≥digo de escape' para una nueva l√≠nea.

# %%
print('a\nb')

# %%
'esto es una cadena'

# %%
"esto es una cadena"

# %%
"esta no anda'

# %%
'esta tampoco"

# %%
"una cadena puede usar comillas 'adentro', si es distinta de la de afuera"

# %%
'una cadena puede usar comillas "adentro", si es distinta de la de afuera'

# %%
"tambi√©n puedo \"escapar\" las comillas"

# %%
'tambi√©n puedo \'escapar\' las comillas'

# %% [markdown]
# Las cadenas de caracteres (y el c√≥digo) en Python son cadenas [Unicode](https://home.unicode.org), con encoding (usualmente) [UTF-8](http://www.utf-8.com).
#
# Si alguien quiere saber m√°s sobre Unicode hay [excelente art√≠culos escritos](http://www.joelonsoftware.com/articles/Unicode.html) y por supuesto, [documentaci√≥n sobre su uso en Python](https://docs.python.org/3/howto/unicode.html). 
#
# Pero... ¬øQu√© es Unicode y porqu√© me puede llegar a importar?

# %%
'\U0001F618\U0001F617\U0001F615\U0001F614\U0001F613\U0001F612'

# %%
'ÊñáÂ≠óÂåñ„Åë  ŸÑŸàÿ≠ÿ© ÿßŸÑŸÖŸÅÿßÿ™Ÿäÿ≠ ÿßŸÑÿπÿ±ÿ®Ÿäÿ© ‡§Ö‡§∂‡§ã'

# %%
'\U000003C0'

# %% [markdown]
# Para una lista de c√≥digos mirar [aqu√≠](https://www.unicode.org/charts/)

# %% [markdown]
# ## Cadenas de formato
#
# Las cadenas de formato son una evoluci√≥n de la forma de construir cadenas a partir de expresiones para poder mostrar resultados. Tienen un mont√≥n de detalles de construcci√≥n pero en general basta con acordarse algunas pocas cosas para producir un gran conjunto de `f-strings` √∫tiles. Si bien normalmente se las deja para m√°s adelante creo que conviene encontr√°rselas lo antes posible para saber que est√°n ah√≠ para cuando sean necesarias y no pasarse horas googleando y haciendo un paste que quiz√°s no resuelva del todo el problema.
#
# Una `f-string` permite generar una cadena que contiene el resultado de una expresi√≥n. La cadena empieza con `f'`, `F'`, `f"` o `F"` y contiene uno o m√°s pares de llaves `{}`. Cuando se genera una `f-string` se eval√∫a la expresi√≥n que va entre las llaves, se le "da formato" es decir se convierte el resultado en una cadena de caracteres y se reemplaza esta cadena en donde estaban las llaves.
#
# Por ejemplo:

# %%
f"1/18, es en punto flotante, igual a {1/18}"

# %%
f"1/18 es, en punto flotante, igual a {1/18:.3g}, redondeado a tres cifras significativas"

# %%
f"1/18 es en punto flotante igual a {1/18:.3f}, redondeado a tres decimales"

# %%
f"1/18 es en notaci√≥n exponencial igual a {1/18:.3e}, redondeado a tres decimales"

# %%
f"|{10*10*10:10d}|{10*10*10+5:10d}|{10*10*10-3145:10d}|"

# %%
f"|{1/3:10.5f}|{-1*1/3:10.5f}|{2-1/3:10.5f}|"

# %%
f"uno mas complicado {abs(10000+1j):x^+30_.3f}"

# %% [markdown]
# ## Precedencia
#
# Si uno tiene muy claro las reglas de precedencia puede escribir las cosas de manera que siempre funcionen, pero en general conviene usar par√©ntesis para aclarar el orden, que igual, como vimos m√°s arriba en algunos casos es importante porque distintos √≥rdenes dan distintos resultados.

# %%
1 + 2 * 3 / 2 * 3 / 3**2 - 2

# %%
2**2**2**2

# %%
2**(2**(2**2))

# %%
((2**2)**2)**2

# %% [markdown]
# # Cuando las cosas no andan

# %%
1/0 # La divisi√≥n por cero es un error

# %%
2.0**10000 

# %%
2.0e10000 # Este n√∫mero es mayor al mayor n√∫mero representable (en valor absoluto) 
          # pero no da Overflow ü§î

# %%
2.0e-10000 # Este n√∫mero es menor al menor n√∫mero representable (en valor absoluto)

# %%
0.1.hex()

# %%
2.0e10000/2.0e10000 # Infinito sobre Infinito

# %%
2.0e10000 - 2.0e10000 # Infinito menos Infinito

# %%
